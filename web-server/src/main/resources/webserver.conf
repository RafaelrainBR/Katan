# The Katan web server is an extremely useful tool for those who want ease when
# it comes to managing their Katan accounts, servers and states, however, it is optional.
# Thanks to the CLI we can do everything possible on Katan through it.
# If you are not going to use the Web Server, turn it off as this will save your machine's resources.
enabled = false

# Katan's Web Server displays all connections on the console,
# in case your console is being spammed (there are many connections simultaneously),
# or you just don't want it to display, you can disable this.
logging = false

# Designed for servers that run using secure connectors (HTTPS), enabling this function will force all
# requests made for the insecure connector (HTTP) to be redirected to HTTPS, if enabled.
https-redirect = false

# If you use the web-server over reverse proxy, you must enable this option.
# When under reverse proxy, Katan is not able to identify the source addresses
# of the requests sent to him, better known as X-Forwarded-For (XFF) - is a common method for identifying
# the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer.
# Reference: https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For
under-reverse-proxy = false

# HTTP Strict Transport Security (HSTS) is a web security policy mechanism that helps to protect websites
# against man-in-the-middle attacks such as protocol downgrade attacks and cookie hijacking.
# Katan has native support for this, and by default it is enabled, but you can disable it if you want.
# Reference: https://developer.mozilla.org/docs/Web/HTTP/Headers/Strict-Transport-Security
hsts = false

#  ______           _                                  _
#  |  _  \         | |                                | |
#  | | | |___ _ __ | | ___  _   _ _ __ ___   ___ _ __ | |_
#  | | | / _ \ '_ \| |/ _ \| | | | '_ ` _ \ / _ \ '_ \| __|
#  | |/ /  __/ |_) | | (_) | |_| | | | | | |  __/ | | | |_
#  |___/ \___| .__/|_|\___/ \__, |_| |_| |_|\___|_| |_|\__|
#          | |             __/ |
#          |_|            |___/
deployment {
  # Web Server host address.
  host = 0.0.0.0

  # Insecure HTTP and WS connector port, default is 80.
  port = 80

  # Secure connector (HTTPS and WSS).
  ssl {
    # Mark as `true` if you want to use the HTTPS connector, remembering that to use this
    # connector it is necessary to have all the fields of the certificate correctly configured
    enabled = false

    # Port to be used, default is 443.
    port = 443

    # Used to store the server keys (both public and private) along with signed cert.
    keyStore = /path/to/keystore.jks

    # A certificate alias is the name given to a CA certificate located in the keystore.
    keyAlias = myalias

    # The password used to access the keystore file when SSL is enabled and
    # SSL client authentication is enabled on the database server
    keyStorePassword = mypassword

    # Specifies a password for the private key about to be generated
    privateKeyPassword = mypassword
  }

  # Web server shutdown settings.
  shutdown {
    # The maximum amount of time for activity to cool down (in milliseconds).
    gracePeriod = 1000

    # The maximum amount of time to wait until server stops gracefully (in milliseconds).
    timeout = 5000
  }

}


#   _____   _____  ______   _____
#  /  __ \ |  _  | | ___ \ /  ___|
#  | /  \/ | | | | | |_/ / \ `--.
#  | |     | | | | |    /   `--. \
#  | \__/\ \ \_/ / | |\ \  /\__/ /
#   \____/  \___/  \_| \_| \____/
#
# Cross Origin Resource Sharing
#
# By default, unlike Katan servers, the web server does not run in an isolated Docker container therefore,
# the network it is on is being exported to the public, configuring CORS is essential
# so that no unwanted connections go through the Web Server.
#
# If you are running the Katan Daemon, allow the configuration of the host on
# which the Katan Daemon is located so that it has access to the Web Server.
# Reference: https://developer.mozilla.org/docs/Web/HTTP/CORS
cors {
  # Allows any network to have access to the Web Server resource sharing network.
  # Set to true if you don't know the origin of the Katan Daemon.
  allowAnyHost = false

  # Hosts that will be allowed through CORS verification.
  # You must specify the panel's address here to authorize it to make requests to the server.
  hosts = [{
    hostname = "localhost:8081"
    schemes = [http, https, ws, wss]
  }]
}

#     ___   _    _   _____
#    |_  | | |  | | |_   _|
#      | | | |  | |   | |
#      | | | |/\| |   | |
#  /\__/ / \  /\  /   | |
#  \____/   \/  \/    \_/
#
# JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for
# securely transmitting information between parties as a JSON object.
# This information can be verified and trusted because it is digitally signed.
# JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.
# Reference: https://jwt.io/
jwt {
  # Identifies principal that issued the JWT resource.
  # Change this to your server's static address.
  issuer = "https://katan.com"

  # Each principal intended to process the JWT MUST identify itself with a value in the audience claim.
  # If the principal processing the claim does not identify itself with a value in the "aud"
  # claim when this claim is present, then the JWT MUST be rejected.
  audience = jwt-audience

  # The algorithm (HS256) used to sign the token.
  secret = "12345678"
}